#lang typed/racket

;; ADVENT OF CODE 2021
;; qxu21
;; DAY 2

(: list-from-file : Input-Port -> (Listof String))
(define (list-from-file in)
  (for/list ([l (in-lines in)]) l))

(define-type Direction (U 'Forward 'Up 'Down))

(define-struct Instruction
  ([dir : Direction]
   [q : Natural]))

(: string->natural : String -> Natural)
(define (string->natural s)
  (let
        ([n (string->number s)])
      (if
       (and n (exact-nonnegative-integer? n))
       n
       (raise "Non-natural number in input!"))))

(: strings-to-instructions : (Listof String) -> (Listof Instruction))
(define (strings-to-instructions li)
  (map
   (lambda ([s : String])
     (let
         ([spl (string-split s)]) ; split on whitespace by default
       (make-Instruction
        (match (first spl)
          ["forward" 'Forward]
          ["down" 'Down]
          ["up" 'Up])
        (string->natural (second spl)))))))
  